#! /usr/bin/env node
/* jshint esversion: 6 */

let _     = require('lodash'),
    path  = require('path');

makeIndexFiles('src/js/**/*.autogen-index');

/**
 * Generate index.js files for directories marked as such.
 * @return {void}
 */
function makeIndexFiles(query) {
  let fs              = require('fs'),
      glob            = require('glob'),
      packageRootPath = path.resolve(path.parse(__filename).base, '../'),
      globQuery       = path.join(packageRootPath, query);

  glob(globQuery, {dot:true}).on('end', function( fileList ){
    fileList.forEach(makeIndexForFilesInDirectory);
  });


  /**
   * Given a directory that contains .autogenerate-index, inspect the directory
   * for what should be exported and create an index.js file.
   * @param  {string} fileName Full path to .autogenerate-index file
   * @return {void}
   */
  function makeIndexForFilesInDirectory( fileName ){
    let dirBasePath   = path.parse(fileName).dir,
        dirGlobQuery  = path.join(dirBasePath, '/**/*.js'),
        indexFilePath = path.join(dirBasePath, 'index.js');

    glob(dirGlobQuery, {ignore: indexFilePath}).on('end', function( filesInDir ){
      var writeStream = fs.createWriteStream(indexFilePath);
      writeHeader(writeStream);

      filesInDir.forEach(function( memberFilePath ){
        var fileInfo    = path.parse(memberFilePath),
            relPath     = memberFilePath.replace(`${dirBasePath}/`, ''),
            exportName  = getExportAsName(relPath.split('/'), fileInfo.name);
        writeStream.write(`export {default as ${exportName}} from './${relPath}';\n`);
      });

      writeStream.on('close', function(){
        console.log(`OK: index.js file auto-generated for ${dirBasePath}`);
      }).end();
    });
  }


  /**
   * Given pathSplitBySlash (eg. '/yolo.js' -> ['yolo.js'], or '/one/two.js' ->
   * ['one', 'two.js']), this will return a camel-cased name for the module
   * export.
   * @param  {array} pathSplitBySlash   Created by string.split('/')
   * @param  {Object} baseName          Given "myFile.js" -> "myFile" is baseName
   * @return {string}
   */
  function getExportAsName( pathSplitBySlash, baseName ){
    // remove (and discard) the last element from the array
    pathSplitBySlash.pop();
    // now check the array length; if its zero, we can just return the basename
    if( pathSplitBySlash.length === 0 ){ return baseName; }
    // if we're here, we need to do camel-casing; first thing, add baseName
    pathSplitBySlash.push(baseName);
    // camelcase things in the array and return joined string
    return pathSplitBySlash.map(function(string, index){
      return index === 0 ? string :
        (string.charAt(0).toUpperCase() + string.slice(1));
    }).join('');
  }


  /**
   * Write header text to the file.
   * @param  {stream} stream Writable stream for the file.
   * @return {void}
   */
  function writeHeader( stream ){
    stream.write(`/*
  WARNING: do not edit this file manually. Use the '--makeIndexFiles' generator
  from the CLI.
  */\n\n`);
  }
}
